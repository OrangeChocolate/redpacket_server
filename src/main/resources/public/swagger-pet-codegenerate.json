{
    "swagger": "2.0",
    "info": {
        "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
        "version": "1.0.0",
        "title": "Swagger Petstore",
        "contact": {
            "email": "apiteam@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "host": "localhost:8080",
    "basePath": "/v2",
    "tags": [{
        "name": "store-api-controller",
        "description": "the store API"
    }, {
        "name": "pet-api-controller",
        "description": "the pet API"
    }, {
        "name": "user-api-controller",
        "description": "the user API"
    }],
    "paths": {
        "/pet": {
            "post": {
                "tags": ["pet"],
                "summary": "Add a new pet to the store",
                "operationId": "addPetUsingPOST",
                "consumes": ["application/xml", "application/json"],
                "produces": ["application/xml", "application/json"],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "Pet object that needs to be added to the store",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Pet"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "201": {
                        "description": "Created"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "security": [{
                    "petstore_auth": ["write:pets", "read:pets"]
                }]
            },
            "put": {
                "tags": ["pet"],
                "summary": "Update an existing pet",
                "operationId": "updatePetUsingPUT",
                "consumes": ["application/xml", "application/json"],
                "produces": ["application/xml", "application/json"],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "Pet object that needs to be added to the store",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Pet"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Pet not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                },
                "security": [{
                    "petstore_auth": ["write:pets", "read:pets"]
                }]
            }
        },
        "/pet/findByStatus": {
            "get": {
                "tags": ["pet"],
                "summary": "Finds Pets by status",
                "description": "Multiple status values can be provided with comma separated strings",
                "operationId": "findPetsByStatusUsingGET",
                "consumes": ["application/json"],
                "produces": ["application/xml", "application/json"],
                "parameters": [{
                    "name": "status",
                    "in": "query",
                    "description": "Status values that need to be considered for filter",
                    "required": true,
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "collectionFormat": "multi"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value",
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [{
                    "petstore_auth": ["write:pets", "read:pets"]
                }]
            }
        },
        "/pet/findByTags": {
            "get": {
                "tags": ["pet"],
                "summary": "Finds Pets by tags",
                "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
                "operationId": "findPetsByTagsUsingGET",
                "consumes": ["application/json"],
                "produces": ["application/xml", "application/json"],
                "parameters": [{
                    "name": "tags",
                    "in": "query",
                    "description": "Tags to filter by",
                    "required": true,
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "collectionFormat": "multi"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    },
                    "400": {
                        "description": "Invalid tag value",
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [{
                    "petstore_auth": ["write:pets", "read:pets"]
                }]
            }
        },
        "/pet/{petId}": {
            "get": {
                "tags": ["pet"],
                "summary": "Find pet by ID",
                "description": "Returns a single pet",
                "operationId": "getPetByIdUsingGET",
                "consumes": ["application/json"],
                "produces": ["application/xml", "application/json"],
                "parameters": [{
                    "name": "petId",
                    "in": "path",
                    "description": "ID of pet to return",
                    "required": true,
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied",
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Pet not found",
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    }
                },
                "security": [{
                    "api_key": []
                }]
            },
            "post": {
                "tags": ["pet"],
                "summary": "Updates a pet in the store with form data",
                "operationId": "updatePetWithFormUsingPOST",
                "consumes": ["application/x-www-form-urlencoded"],
                "produces": ["application/xml", "application/json"],
                "parameters": [{
                    "name": "petId",
                    "in": "path",
                    "description": "ID of pet that needs to be updated",
                    "required": true,
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "name",
                    "in": "formData",
                    "description": "Updated name of the pet",
                    "required": false,
                    "type": "string"
                }, {
                    "name": "status",
                    "in": "formData",
                    "description": "Updated status of the pet",
                    "required": false,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "201": {
                        "description": "Created"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "security": [{
                    "petstore_auth": ["write:pets", "read:pets"]
                }]
            },
            "delete": {
                "tags": ["pet"],
                "summary": "Deletes a pet",
                "operationId": "deletePetUsingDELETE",
                "consumes": ["application/json"],
                "produces": ["application/xml", "application/json"],
                "parameters": [{
                    "name": "petId",
                    "in": "path",
                    "description": "Pet id to delete",
                    "required": true,
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "api_key",
                    "in": "header",
                    "description": "api_key",
                    "required": false,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Pet not found"
                    }
                },
                "security": [{
                    "petstore_auth": ["write:pets", "read:pets"]
                }]
            }
        },
        "/pet/{petId}/uploadImage": {
            "post": {
                "tags": ["pet"],
                "summary": "uploads an image",
                "operationId": "uploadFileUsingPOST",
                "consumes": ["multipart/form-data"],
                "produces": ["application/json"],
                "parameters": [{
                    "name": "petId",
                    "in": "path",
                    "description": "ID of pet to update",
                    "required": true,
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "additionalMetadata",
                    "in": "formData",
                    "description": "Additional data to pass to server",
                    "required": false,
                    "type": "string"
                }, {
                    "name": "file",
                    "in": "formData",
                    "description": "file detail",
                    "required": false,
                    "type": "file"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ModelApiResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [{
                    "petstore_auth": ["write:pets", "read:pets"]
                }]
            }
        },
        "/store/inventory": {
            "get": {
                "tags": ["store"],
                "summary": "Returns pet inventories by status",
                "description": "Returns a map of status codes to quantities",
                "operationId": "getInventoryUsingGET",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [{
                    "api_key": []
                }]
            }
        },
        "/store/order": {
            "post": {
                "tags": ["store"],
                "summary": "Place an order for a pet",
                "operationId": "placeOrderUsingPOST",
                "consumes": ["application/json"],
                "produces": ["application/xml", "application/json"],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "order placed for purchasing the pet",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Order"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Invalid Order",
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/store/order/{orderId}": {
            "get": {
                "tags": ["store"],
                "summary": "Find purchase order by ID",
                "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
                "operationId": "getOrderByIdUsingGET",
                "consumes": ["application/json"],
                "produces": ["application/xml", "application/json"],
                "parameters": [{
                    "name": "orderId",
                    "in": "path",
                    "description": "ID of pet that needs to be fetched",
                    "required": true,
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied",
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Order not found",
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    }
                }
            },
            "delete": {
                "tags": ["store"],
                "summary": "Delete purchase order by ID",
                "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
                "operationId": "deleteOrderUsingDELETE",
                "consumes": ["application/json"],
                "produces": ["application/xml", "application/json"],
                "parameters": [{
                    "name": "orderId",
                    "in": "path",
                    "description": "ID of the order that needs to be deleted",
                    "required": true,
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/user": {
            "post": {
                "tags": ["user"],
                "summary": "Create user",
                "description": "This can only be done by the logged in user.",
                "operationId": "createUserUsingPOST",
                "consumes": ["application/json"],
                "produces": ["application/xml", "application/json"],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "Created user object",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/User"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "201": {
                        "description": "Created"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/user/createWithArray": {
            "post": {
                "tags": ["user"],
                "summary": "Creates list of users with given input array",
                "operationId": "createUsersWithArrayInputUsingPOST",
                "consumes": ["application/json"],
                "produces": ["application/xml", "application/json"],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "List of user object",
                    "required": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/User"
                        }
                    }
                }],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "201": {
                        "description": "Created"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/user/createWithList": {
            "post": {
                "tags": ["user"],
                "summary": "Creates list of users with given input array",
                "operationId": "createUsersWithListInputUsingPOST",
                "consumes": ["application/json"],
                "produces": ["application/xml", "application/json"],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "List of user object",
                    "required": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/User"
                        }
                    }
                }],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "201": {
                        "description": "Created"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/user/login": {
            "get": {
                "tags": ["user"],
                "summary": "Logs user into the system",
                "operationId": "loginUserUsingGET",
                "consumes": ["application/json"],
                "produces": ["application/xml", "application/json"],
                "parameters": [{
                    "name": "username",
                    "in": "query",
                    "description": "The user name for login",
                    "required": true,
                    "type": "string"
                }, {
                    "name": "password",
                    "in": "query",
                    "description": "The password for login in clear text",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid username/password supplied",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/user/logout": {
            "get": {
                "tags": ["user"],
                "summary": "Logs out current logged in user session",
                "operationId": "logoutUserUsingGET",
                "consumes": ["application/json"],
                "produces": ["application/xml", "application/json"],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/user/{username}": {
            "get": {
                "tags": ["user"],
                "summary": "Get user by user name",
                "operationId": "getUserByNameUsingGET",
                "consumes": ["application/json"],
                "produces": ["application/xml", "application/json"],
                "parameters": [{
                    "name": "username",
                    "in": "path",
                    "description": "The name that needs to be fetched. Use user1 for testing. ",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Invalid username supplied",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                }
            },
            "put": {
                "tags": ["user"],
                "summary": "Updated user",
                "description": "This can only be done by the logged in user.",
                "operationId": "updateUserUsingPUT",
                "consumes": ["application/json"],
                "produces": ["application/xml", "application/json"],
                "parameters": [{
                    "name": "username",
                    "in": "path",
                    "description": "name that need to be updated",
                    "required": true,
                    "type": "string"
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "Updated user object",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/User"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Invalid user supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "delete": {
                "tags": ["user"],
                "summary": "Delete user",
                "description": "This can only be done by the logged in user.",
                "operationId": "deleteUserUsingDELETE",
                "consumes": ["application/json"],
                "produces": ["application/xml", "application/json"],
                "parameters": [{
                    "name": "username",
                    "in": "path",
                    "description": "The name that needs to be deleted",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        }
    },
    "definitions": {
        "Order": {
            "type": "object",
            "properties": {
                "complete": {
                    "type": "boolean",
                    "example": false
                },
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "petId": {
                    "type": "integer",
                    "format": "int64"
                },
                "quantity": {
                    "type": "integer",
                    "format": "int32"
                },
                "shipDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "status": {
                    "type": "string",
                    "description": "Order Status",
                    "enum": ["placed", "approved", "delivered"]
                }
            }
        },
        "Category": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "lastName": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "userStatus": {
                    "type": "integer",
                    "format": "int32",
                    "description": "User Status"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "Tag": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "ModelApiResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32"
                },
                "message": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "Pet": {
            "type": "object",
            "required": ["name", "photoUrls"],
            "properties": {
                "category": {
                    "$ref": "#/definitions/Category"
                },
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string",
                    "example": "doggie"
                },
                "photoUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "pet status in the store",
                    "enum": ["available", "pending", "sold"]
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Tag"
                    }
                }
            }
        }
    }
}